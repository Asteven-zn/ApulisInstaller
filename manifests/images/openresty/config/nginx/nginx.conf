user root;
worker_processes  4;
events {
    worker_connections 1024;
}

http {
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';
    access_log  /usr/local/openresty/nginx/logs/access.log  main;
    error_log /usr/local/openresty/nginx/logs/error.log info;
    sendfile        on;
    #tcp_nopush     on;
    lua_package_path "/usr/local/openresty/nginx/jwt-lua/?.lua;;";
    #keepalive_timeout  0;
    keepalive_timeout  65;
    client_max_body_size 1000M;
    add_header Strict-Transport-Security "max-age=0;";

    server {
        listen 5080;
        resolver 10.68.0.2 valid=10s;
        set $grafanaurl "http://grafana.kube-system.svc.cluster.local:3000/";
        set $grafana_zhurl "http://grafana-zh.kube-system.svc.cluster.local:3001/";
        set $istiourl "http://istio-ingressgateway.istio-system.svc.cluster.local/";

        location ~ /endpoints/grafana_zh/(.*) {
            access_by_lua '
                local jwt = require("resty.nginx-jwt-cookie")
                jwt.auth()
            ';
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_read_timeout 86400;
            proxy_pass $grafana_zhurl$1$is_args$args;
        }
        location ~ /endpoints/grafana/(.*) {
            access_by_lua '
                local jwt = require("resty.nginx-jwt-cookie")
                jwt.auth()
            ';
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_read_timeout 86400;
            proxy_pass $grafanaurl$1$is_args$args;
        }
        location ~ /endpoints/v2/(.*?)/(.*) {
            set $pre $1;
            set_by_lua $port '
                local encoding = require "resty.base_encoding"
                return encoding.decode_base64(ngx.var.pre)
            ';
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_read_timeout 86400;
            proxy_pass http://127.0.0.1:$port/$2$is_args$args;
        }
        location ~ /endpoints/v3/v1/models/(.*):predict {
            proxy_http_version 1.1;
            proxy_set_header Host $1-predictor-default.kfserving-pod.example.com;
            proxy_pass "${istiourl}v1/models/$1:predict${is_args}${args}";
        }
        location ~ /endpoints/v4/(.*?)/(.*) {
            access_by_lua '
                local jwt = require("resty.nginx-jwt-cookie")
                jwt.auth()
            ';
            set $pre $1;
            set_by_lua $port '
                local encoding = require "resty.base_encoding"
                return encoding.decode_base64(ngx.var.pre)
            ';
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_read_timeout 86400;
            proxy_pass http://127.0.0.1:$port/$2$is_args$args;
        }
        location ~ /endpoints/(.*?)/(.*) {
            access_by_lua '
                local jwt = require("resty.nginx-jwt-cookie")

                local user = ngx.var.username
                if user == nil then
                    ngx.exit(ngx.HTTP_UNAUTHORIZED)
                    return
                end

                local data = jwt.auth()
                if data == nil or data["payload"]["userName"] ~= user then
                    ngx.exit(ngx.HTTP_UNAUTHORIZED)
                    return
                end
            ';

            set $pre $1;
            set $username '';
            set_by_lua $port '
                local cjson = require "cjson"
                local encoding = require "resty.base_encoding"

                local params = cjson.decode(encoding.decode_base64(ngx.var.pre))
                ngx.var.username = params["userName"]
                return encoding.decode_base64(params["port"])
            ';
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_read_timeout 86400;
            proxy_pass http://127.0.0.1:$port$request_uri;
        }

    }
}

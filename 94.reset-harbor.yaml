# [optional] to set up a HARBOR, and to integrate the HARBOR with k8s cluster
# read the doc: 'doc/harbor.md'

- hosts: harbor
  any_errors_fatal: yes
  vars_prompt:
    name: "confirmation"
    prompt: "Do you want to reset harbor data(yes/no)?"
    default: "no"
    private: no
  tasks:
    - name: First Check Confirmation
      file:
        path: "{{HARBOR_LOCATION}}"
        state: absent
      when: confirmation | bool

    - name: First Check Confirmation
      fail: msg='Reset harbor action canceled'
      when: not (confirmation | bool)

- hosts: harbor
  roles:
    - { role: chrony, when: "NEW_INSTALL == 'yes' and groups['chrony']|length > 0" }
    - { role: prepare, when: "NEW_INSTALL == 'yes'" }
    - { role: docker, when: "NEW_INSTALL == 'yes'" }
    - { role: harbor, when: "NEW_INSTALL == 'yes'" }
  tasks:
    - name: Fetching the HARBOR SERVER's CA cert
      fetch:
        src: "{{ ca_dir }}/ca.pem"
        dest: "{{ base_dir }}/download/"
        flat: yes
      when: hostvars[groups.harbor[0]]['SELF_SIGNED_CERT'] == 'yes'

# change /etc/hosts
- hosts:
    - kube-master
    - kube-worker
  tasks:
    - block:
        - block:
            - name: Creating cert dir for the docker daemon
              file: name=/etc/docker/certs.d/{{ HARBOR_DOMAIN }}:{{HARBOR_HTTPS_PORT}} state=directory

            - name: Installing the HARBOR SERVER's CA cert for docker
              copy: src={{ base_dir }}/download/ca.pem dest=/etc/docker/certs.d/{{ HARBOR_DOMAIN }}:{{HARBOR_HTTPS_PORT}}/ca.crt
          when: "CONTAINER_RUNTIME == 'docker'"
      when: hostvars[groups.harbor[0]]['SELF_SIGNED_CERT'] == 'yes'

    # [optional] if you have a DNS server, add an 'A record' instead
    - name: Adding an '/etc/hosts' entry for the HARBOR DOMAIN
      lineinfile:
        dest: /etc/hosts
        state: present
        regexp: '{{ HARBOR_DOMAIN }}'
        line: "{{ groups['harbor'][0] }} {{ HARBOR_DOMAIN }}"
      when: "HARBOR_DOMAIN != ''"

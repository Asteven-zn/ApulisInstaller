# [optional] to set up a HARBOR, and to integrate the HARBOR with k8s cluster
# read the guide: 'guide/harbor.md'

- hosts: harbor
  roles:
  - { role: chrony, when: "NEW_INSTALL == 'yes' and groups['chrony']|length > 0" }
  - { role: prepare, when: "NEW_INSTALL == 'yes'" }
  - { role: docker, when: "NEW_INSTALL == 'yes'" }
  - { role: harbor, harbor_step: 'init', when: "NEW_INSTALL == 'yes'" }
  tasks:
  - name: Fetching the HARBOR SERVER's CA cert
    fetch:
      src: "{{ ca_dir }}/ca.pem"
      dest: "{{ base_dir }}/down/"
      flat: yes
    when: hostvars[groups.harbor[0]]['SELF_SIGNED_CERT'] == 'yes'

- hosts: 
  - kube-master
  - kube-worker
  tasks:
  - name: Define 'harbor_hostname', a domain name
    set_fact: harbor_hostname={{ hostvars[groups.harbor[0]]['HARBOR_DOMAIN'] }}

  - name: Define 'harbor_hostname', an IP Addr
    set_fact: harbor_hostname={{ groups['harbor'][0] }}
    when: hostvars[groups.harbor[0]]['HARBOR_DOMAIN'] == ''
  
  - block:  
      - block:  
        - name: Creating cert dir for the docker daemon
          file: name=/etc/docker/certs.d/{{ harbor_hostname }}:{{HARBOR_HTTPS_PORT}} state=directory
    
        - name: Installing the HARBOR SERVER's CA cert for docker
          copy: src={{ base_dir }}/down/ca.pem dest=/etc/docker/certs.d/{{ harbor_hostname }}:{{HARBOR_HTTPS_PORT}}/ca.crt
        when: "CONTAINER_RUNTIME == 'docker'"
    when: hostvars[groups.harbor[0]]['SELF_SIGNED_CERT'] == 'yes'

  # [optional] if you have a DNS server, add an 'A record' instead
  - name: Adding an '/etc/hosts' entry for the HARBOR DOMAIN
    lineinfile:
      dest: /etc/hosts
      state: present
      regexp: '{{ harbor_hostname }}'
      line: "{{ groups['harbor'][0] }} {{ harbor_hostname }}"
    when: "hostvars[groups.harbor[0]]['HARBOR_DOMAIN'] != ''"

- hosts: harbor
  roles:
    - { role: harbor, harbor_step: 'push' }
